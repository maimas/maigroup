package com.mg.persistence.validation.constraints;

import com.mg.persistence.domain.SystemFiled;
import com.mg.persistence.domain.bizitem.model.SchemaProperty;
import com.mg.persistence.domain.enumeration.model.EnumModel;
import com.mg.persistence.domain.enumeration.service.EnumService;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.log4j.Log4j2;

/**
 * Validates if the field length has expected size.
 * Size_1_100 - min 1; max 100
 * Size_1 - min 1; max unlimited
 */
@Log4j2
@Data
@EqualsAndHashCode(callSuper = false)
public class Enum extends AbstractConstraint {

    private EnumService enumService;
    private boolean autogenerated;
    private String enumType;
    private SchemaProperty schemaProperty;


    public Enum(EnumService enumService, SchemaProperty schemaProperty, Object fieldValue, String constraint) {
        this.constraintName = getClass().getSimpleName();
        this.constraintString = constraint;
        this.enumType = schemaProperty.getEnumName();
        this.enumService = enumService;
        this.autogenerated = schemaProperty.isAutogenerated();
        this.fieldName = schemaProperty.getEnumName();
        this.fieldValue = fieldValue;

        this.schemaProperty = schemaProperty;
    }


    public boolean isValid() {
        EnumModel dbEnum = enumService.findOne(SystemFiled.Value, fieldValue, fieldName);

        if (dbEnum == null && autogenerated) {
            EnumModel newEnum = new EnumModel();
            newEnum.setItemType(enumType);
            newEnum.setCaption(String.valueOf(fieldValue));
            newEnum.setCaptionTransKey(String.valueOf(fieldValue));
            newEnum.setValue(String.valueOf(fieldValue));
            newEnum.setDescription(String.valueOf(fieldValue));
            newEnum.setDescriptionTransKey(String.valueOf(fieldValue));

            enumService.save(newEnum);
            log.info(String.format("Runtime enumeration [%s] created for [%s]", fieldValue, newEnum.getItemType()));
            return true;

        }
        return dbEnum != null;
    }

    public String getViolationMsg() {
        return String.format("Field [%s] has an invalid enumeration value [%s]", schemaProperty.getCaption(), fieldValue);
    }


}

