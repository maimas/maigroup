package com.mg.persistence.validation.constraints;

import com.mg.persistence.domain.bizitem.model.SchemaProperty;
import com.mg.persistence.domain.enumeration.service.EnumService;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.log4j.Log4j2;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Validates if the field length has expected size.
 * Size_1_100 - min 1; max 100
 * Size_1 - min 1; max unlimited
 */
@Data
@Log4j2
@EqualsAndHashCode(callSuper = false)
public class EnumList extends AbstractConstraint {

    private EnumService enumService;
    private boolean autogenerated;
    private String enumType;
    private SchemaProperty schemaProperty;

    public EnumList(EnumService enumService, SchemaProperty schemaProperty, Object filedValue, String constraint) {
        this.schemaProperty = schemaProperty;
        this.constraintName = getClass().getSimpleName();
        this.constraintString = constraint;

        this.enumService = enumService;
        this.enumType = schemaProperty.getEnumName();
        this.autogenerated = schemaProperty.isAutogenerated();

        this.fieldName = schemaProperty.getCaption();
        this.fieldValue = filedValue;
    }

    public boolean isValid() {
        boolean valid = true;

        if (fieldValue == null) {
            return valid;
        }

        List<String> enumListToCheck = new ArrayList<>();
        if (fieldValue instanceof List) {
            ((List) fieldValue).forEach(it -> enumListToCheck.add(String.valueOf(it)));

        } else {
            String[] list = String.valueOf(fieldValue).split(",");
            enumListToCheck.addAll(Arrays.asList(list));
        }

        for (String value : enumListToCheck) {
            Enum en = new Enum(enumService, schemaProperty, String.valueOf(value), constraintName);
//            en.setFieldName(fieldName);
//            en.setFieldValue(fieldValue);
//            en.setFieldValue(String.valueOf(value));
            if (!en.isValid()) {
                valid = false;
                break;
            }
        }

        return valid;
    }

    public String getViolationMsg() {
        return String.format("Field type [%s] value [%s] contains at list one invalid enumeration value --> [%s]", fieldValue, schemaProperty.getCaption(), fieldValue);
    }


}

